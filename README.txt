http://34.205.30.130:3000/ziptocbsa/90266

I initially designed the api to be serverless Lambda functions backed by Dynamodb.  While an elegant and 'fast' solution, I felt that it took away from the evaluating code style and organization- so I switched to a more 'traditional' Express.js backend. Once I had a boilerplate backend and parsed the CSVs, I ran into throughput issues with Dynamodb. As I quickly learned- very high burst volume read/writes is extremely expensive on Dynamodb, and while there is auto scaling, the down scaling didn't seem to be reliable/cost effective. The final nail in the coffin was the fact that Dynamodb batchWrite is capped to 25 records, so parsing time seemed unfeasible (throttled by AWS's limits after 14 minutes). I switched to a self managed Mongo installation on EC2 and was able to get ETL time down to seconds due to a single batch write call.

Data Model:

Have a SQL schema to store the loans.  For each loan request >= $1000, set the state to Reserved with a time to live of say 24 hours, analogous to buying airplane or concert tickets- you have a fixed window in which to complete your transaction.  In this case, you have 24 hours to initiate a bank transfer, in which case the state moves to Pending.  At the pending state, the TTL clock resets to say 5 business days, in which case the state should be come settled or canceled automatically, or with Peerstreet intervention.  Once the remaining loan amount to be bought dwindles down, it has to be limited.  Let reservation states occur over a certain amount of the loan, analogous to airlines overbooking seats, except once the entire loan has settled, remaining reserved & pending states get canceled. For similicity, this will be a first in first out settlement system to claim loans, although different business rules can be applied.  Have a noSql cache to store the remaining value of each loan, as decremented by the settled loans- this can be updated daily (like end of day stock market numbers) or hourly.
